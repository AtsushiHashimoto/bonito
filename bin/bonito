cd `dirname $0`
. ../bonito.conf
. ../bonito_sys.conf
. ../library/tools.sh
. ../library/subcommands.sh

MY_CONF=$BONITO_USER_DIR/bonito.conf
if [ $(bonito_file_exists $MY_CONF) -eq 1 ]; then
  . $MY_CONF
else
  # create an empty file.
  mkdir -p $BONITO_USER_DIR
  touch $MY_CONF
fi

exp_text_run="start (or attach to) the docker container."
exp_text_shutdown="stop and remove the docker container"
exp_text_reboot="shutdown the container, then, run it again from image."

exp_text_create="create a new project image. It will also create your home directory for your projects if not exists.)"
exp_text_delete="delete your docker image safely."
exp_text_snapshot="commit and push changes of the docker container to the image in registry."

function usage {
    cat <<EOF
$(basename ${0}) is a docker/kubertenes wrapper for research laboratory.

Usage:
    $(basename ${0}) [command] [<options>]

Command:
    run	              $exp_text_run
    shutdown          $exp_text_shutdown
    reboot            $exp_text_reboot

    create            $exp_text_create
    delete            $exp_text_delete
    snapshot          $exp_text_snapshot


Basic Options:
    --version         print $(basename ${0}) version
    --help, -h        print this. With a command, print help for the command.
EOF
}

function version {
    echo "$(basename ${0}) version $BONITO_VERSION"
}

if [ $# -eq 0 ]; then
  usage
  exit 1
fi

subcommand=${1}
if [ `echo $subcommand | grep -- '--'`]; then
  subcommand=""
else
  shift
fi

# parse options
while [ $# -gt 0 ];
do
    case ${1} in
        --debug|-d)
            set -x
        ;;

        --verbose|-v)
	    is_verbose=1
        ;;

        --help|-h)
            show_help=1
        ;;

        --user|-u)
            user=${2}
            shift
        ;;

        --project|-p)
            project=${2}
            shift
        ;;

        --tag|-t)
            tag=${2}
            shift
        ;;

        --base_image|-b)
            base_image=${2}
            shift
        ;;

        --command|-c)
            command=${2}
            shift
        ;;

        -*)
            echo "[ERROR] Invalid option '${1}'"
            show_help=1
        ;;
        *)
            # if no --flag, treat as --user ${1}
            user=${1}
    esac
    shift
done

function my_silent_exec {
	echo $1 > /dev/null
}

# set default values if variables are not set by options.
my_silent_exec ${user:=$USER}
my_silent_exec ${project:=$BONITO_DEFAULT_PROJ}
my_silent_exec ${tag:=latest}
my_silent_exec ${num_gpu:=1}
my_silent_exec ${command:=$BONITO_SHELL}

image=$(bonito_image)
if [ $(bonito_base_image_exists) -eq 1 ]; then
  my_silent_exec ${base_image:=$(bonito_image_custom $BONITO_DEFAULT_USER $project)}
else
  my_silent_exec ${base_image:=$(bonito_image_custom $BONITO_DEFAULT_USER $BONITO_DEFAULT_PROJ)}
fi

if [ "x$is_verbose" = "x1" ]; then
  echo user: $user
  echo project: $project
fi

# the list of subcommands
subcommands=(run shutdown reboot  create delete snapshot)

containsElement () {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# execute main functions
if $(containsElement $subcommand ${subcommands[@]}); then
  if [ "x$show_help" = "x1" ]; then
    # ex.) help_bonito_run in ../library/subcommands*.sh
    help_bonito_$subcommand
  else
    # ex.) bonito_run in ../library/subcommands*.sh
    bonito_$subcommand
  fi
else
  case $subcommand in
    help|--help|-h )
        usage
    ;;

    version|--version )
        version
    ;;

    *)
        echo "[ERROR] Invalid subcommand '${1}'"
        usage
        exit 1
    ;;
  esac
fi
